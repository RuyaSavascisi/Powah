plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${project.minecraft_version}"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven { url "https://maven.neoforged.net/releases/" }
    maven { url = "https://maven.theillusivec4.top" } //Curios
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modCompileOnly "top.theillusivec4.curios:curios-neoforge:${project.curios_version}:api"
    //modRuntimeOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}"
}

loom {
    runs {
        client {
            mods {
                powah {
                    sourceSet(sourceSets.main)
                    sourceSet(project(":common").sourceSets.main)
                }
            }
        }
        server {
            mods {
                powah {
                    sourceSet(sourceSets.main)
                    sourceSet(project(":common").sourceSets.main)
                }
            }
        }
        data {
            data()
            programArgs('--mod', 'powah',
                    '--all',
                    '--output', file('src/generated/resources/').absolutePath,
                    '--existing', file('src/main/resources').absolutePath)
            mods {
                powah {
                    sourceSet(sourceSets.main)
                    sourceSet(project(":common").sourceSets.main)
                }
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        filter { line ->
            line.replace 'version="0.0.0"', "version=\"$version\""
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
